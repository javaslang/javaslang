/*
 * Some Gradle tasks we use:
 *
 * - Build: `./gradlew check`
 *   | test reports: ./build/reports/tests/test/index.html
 *   | coverage reports: ./build/reports/jacoco/test/html/index.html
 * 
 * - Javadoc (linting): `./gradlew javadoc`
 * 
 * - Benchmarks: `./gradlew jmh`
 *   | for configuration see https://github.com/melix/jmh-gradle-plugin
 * 
 * - Release: `./gradlew release --info`
 *
 */

plugins {
    id "me.champeau.gradle.jmh" version "0.4.8"
    id "net.researchgate.release" version "2.8.0"
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

ext.jmhVersion = '1.21'
ext.junitVersion = '5.5.0-M1'

repositories {
    mavenLocal()
    mavenCentral()
}

compileJava {
    sourceCompatibility = 8
    targetCompatibility = 8
    options.encoding = 'UTF-8'
    options.compilerArgs = [ '-Xlint:all', '-Werror' ]
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    jmh "org.openjdk.jmh:jmh-core:$jmhVersion"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled = true
    }
}

check.dependsOn jacocoTestReport

jar {
    manifest {
        attributes('Automatic-Module-Name': 'io.vavr')
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task testSourcesJar(type: Jar) {
    from sourceSets.test.allSource
    classifier = 'test-sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives javadocJar, sourcesJar, testSourcesJar
}

// Requirements:
//
// - Get public key ID `gpg --list-keys --keyid-format SHORT`
// - Export key `gpg --keyring secring.gpg --export-secret-keys > ~/.gnupg/secring.gpg`
// - Add the following properties to ~/.gradle/gradle.properties
//      signing.keyId=0ABCDEF
//      signing.password=password
//      signing.secretKeyRingFile=/absolute/path/to/.gnupg/secring.gpg
//
signing {
    required { !version.endsWith("-SNAPSHOT") }
    sign configurations.archives
}

// Requirements:
//
// - Add the following properties to ~/.gradle/gradle.properties
//     ossrhUsername=<username>
//     ossrhPassword=<password>
//
uploadArchives {
    repositories {
        mavenDeployer {

            def sonatypeUser = project.hasProperty('ossrhUsername') ? ossrhUsername : ''
            def sonatypePass = project.hasProperty('ossrhPassword') ? ossrhPassword : ''

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUser, password: sonatypePass)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUser, password: sonatypePass)
            }

            // Generate Sonatype conform .pom for Bintray Maven-sync, see https://central.sonatype.org/pages/requirements.html
            pom.project {
                name = project.name
                description = "Vavr is an object-functional library for Java 8+"
                url = 'https://www.vavr.io'
                inceptionYear '2014'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Daniel Dietrich'
                        email = 'cafebab3@gmail.com'
                        organization = 'Vavr'
                        organizationUrl = 'https://github.com/vavr-io'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/vavr-io/vavr.git'
                    developerConnection = 'scm:git:https://github.com/vavr-io/vavr.git'
                    url = 'https://github.com/vavr-io/vavr/tree/master'
                }
            }
        }
    }
}

release {
    buildTasks = ['build']
    tagTemplate = '$name-$version'
    git {
        requireBranch = ''
        pushToRemote = 'origin'
        pushToCurrentBranch = true
    }
}

afterReleaseBuild.dependsOn uploadArchives
